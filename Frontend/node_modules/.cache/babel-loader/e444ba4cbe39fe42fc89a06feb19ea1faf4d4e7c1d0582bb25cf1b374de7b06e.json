{"ast":null,"code":"import axios from 'axios';\n\n// 创建axios实例\nconst request = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? '/api' : 'http://localhost:8080/api',\n  // 后端API基础URL\n  timeout: 10000,\n  // 请求超时时间\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 添加调试日志\nconsole.log('当前环境:', process.env.NODE_ENV);\nconsole.log('axios baseURL:', process.env.NODE_ENV === 'development' ? '/api' : 'http://localhost:8080/api');\n\n// 请求拦截器\nrequest.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  // 可以在这里添加token等认证信息\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // 添加详细调试日志\n  console.log('===== 请求拦截器 =====');\n  console.log('请求方法:', config.method.toUpperCase());\n  console.log('请求URL:', config.url);\n  console.log('完整URL:', config.baseURL + config.url);\n  console.log('请求参数:', config.params || config.data);\n  console.log('请求头:', config.headers);\n  return config;\n}, error => {\n  // 对请求错误做些什么\n  console.error('请求拦截器错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\nrequest.interceptors.response.use(response => {\n  // 对响应数据做点什么\n  console.log('收到响应:', response.status, response.config.url);\n  console.log('响应数据:', response.data);\n  return response;\n}, error => {\n  // 对响应错误做点什么\n  console.error('响应错误:', error);\n\n  // 处理常见的HTTP错误\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        // 未授权，跳转到登录页\n        localStorage.removeItem('token');\n        window.location.href = '/login';\n        break;\n      case 403:\n        console.error('没有权限访问');\n        break;\n      case 404:\n        console.error('请求的资源不存在');\n        break;\n      case 500:\n        console.error('服务器内部错误');\n        break;\n      default:\n        console.error('请求失败:', error.response.data?.message || error.message);\n    }\n  } else if (error.request) {\n    console.error('网络错误，请检查网络连接');\n  } else {\n    console.error('请求配置错误:', error.message);\n  }\n  return Promise.reject(error);\n});\nexport default request;","map":{"version":3,"names":["axios","request","create","baseURL","process","env","NODE_ENV","timeout","headers","console","log","interceptors","use","config","token","localStorage","getItem","Authorization","method","toUpperCase","url","params","data","error","Promise","reject","response","status","removeItem","window","location","href","message"],"sources":["/Users/sunziang/IdeaProjects/backend_bilu/bilu_backend2/src/api/request.js"],"sourcesContent":["import axios from 'axios'\n\n// 创建axios实例\nconst request = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? '/api' : 'http://localhost:8080/api', // 后端API基础URL\n  timeout: 10000, // 请求超时时间\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\n// 添加调试日志\nconsole.log('当前环境:', process.env.NODE_ENV)\nconsole.log('axios baseURL:', process.env.NODE_ENV === 'development' ? '/api' : 'http://localhost:8080/api')\n\n// 请求拦截器\nrequest.interceptors.request.use(\n  config => {\n    // 在发送请求之前做些什么\n    // 可以在这里添加token等认证信息\n    const token = localStorage.getItem('token')\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    \n    // 添加详细调试日志\n    console.log('===== 请求拦截器 =====')\n    console.log('请求方法:', config.method.toUpperCase())\n    console.log('请求URL:', config.url)\n    console.log('完整URL:', config.baseURL + config.url)\n    console.log('请求参数:', config.params || config.data)\n    console.log('请求头:', config.headers)\n    \n    return config\n  },\n  error => {\n    // 对请求错误做些什么\n    console.error('请求拦截器错误:', error)\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\nrequest.interceptors.response.use(\n  response => {\n    // 对响应数据做点什么\n    console.log('收到响应:', response.status, response.config.url)\n    console.log('响应数据:', response.data)\n    return response\n  },\n  error => {\n    // 对响应错误做点什么\n    console.error('响应错误:', error)\n    \n    // 处理常见的HTTP错误\n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          // 未授权，跳转到登录页\n          localStorage.removeItem('token')\n          window.location.href = '/login'\n          break\n        case 403:\n          console.error('没有权限访问')\n          break\n        case 404:\n          console.error('请求的资源不存在')\n          break\n        case 500:\n          console.error('服务器内部错误')\n          break\n        default:\n          console.error('请求失败:', error.response.data?.message || error.message)\n      }\n    } else if (error.request) {\n      console.error('网络错误，请检查网络连接')\n    } else {\n      console.error('请求配置错误:', error.message)\n    }\n    \n    return Promise.reject(error)\n  }\n)\n\nexport default request"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}