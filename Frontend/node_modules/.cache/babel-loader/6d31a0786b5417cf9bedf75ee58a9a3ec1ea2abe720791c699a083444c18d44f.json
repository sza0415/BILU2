{"ast":null,"code":"import \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport { ref, reactive, onMounted, watch } from 'vue';\nimport { searchCases as searchCasesApi, addCase, updateCase, deleteCase as deleteCaseApi, getCaseStatistics } from '@/api/case';\n\n// 导入组件\nimport CaseStatistics from '@/components/case/CaseStatistics.vue';\nimport CaseSearch from '@/components/case/CaseSearch.vue';\nimport CaseList from '@/components/case/CaseList.vue';\nimport Pagination from '@/components/case/Pagination.vue';\nimport AddCaseModal from '@/components/case/modals/AddCaseModal.vue';\nimport EditCaseModal from '@/components/case/modals/EditCaseModal.vue';\nimport DeleteCaseModal from '@/components/case/modals/DeleteCaseModal.vue';\nimport CaseDetailModal from '@/components/case/modals/CaseDetailModal.vue';\nexport default {\n  name: 'CaseManagement',\n  components: {\n    CaseStatistics,\n    CaseSearch,\n    CaseList,\n    Pagination,\n    AddCaseModal,\n    EditCaseModal,\n    DeleteCaseModal,\n    CaseDetailModal\n  },\n  setup() {\n    // 状态变量\n    const loading = ref(false);\n    const statisticsLoading = ref(false);\n    const showAdvancedSearch = ref(false);\n    const cases = ref([]);\n    const caseListKey = ref(0); // 用于强制刷新CaseList组件\n    const statistics = ref({\n      totalCases: 0,\n      criminalCases: 0,\n      civilCases: 0,\n      administrativeCases: 0,\n      investigatingCases: 0,\n      inTrialCases: 0,\n      closedCases: 0\n    });\n\n    // 分页相关\n    const currentPage = ref(1);\n    const pageSize = ref(10);\n    const totalItems = ref(0);\n    const totalPages = ref(0);\n\n    // 搜索表单\n    const searchForm = reactive({\n      q: '',\n      caseType: '',\n      status: '',\n      startDateFrom: '',\n      startDateTo: '',\n      createdAtFrom: '',\n      createdAtTo: '',\n      sortBy: 'createdAt_desc',\n      page: 1,\n      size: pageSize.value\n    });\n\n    // 模态框引用\n    const addCaseModalRef = ref(null);\n    const editCaseModalRef = ref(null);\n    const deleteCaseModalRef = ref(null);\n    const caseDetailModalRef = ref(null);\n\n    // 加载案件列表\n    // const loadCases = async () => {\n    //   loading.value = true\n    //   try {\n    //     const response = await getCaseList()\n    //     if (response.data && response.data.code === 200) {\n    //       cases.value = response.data.data || []\n    //     } else {\n    //       console.error('加载案件列表失败:', response.data ? response.data.msg : '未知错误')\n    //     }\n    //   } catch (error) {\n    //     console.error('加载案件列表失败:', error)\n    //   } finally {\n    //     loading.value = false\n    //   }\n    // }\n\n    // 加载案件统计数据\n    const loadStatistics = async () => {\n      statisticsLoading.value = true;\n      try {\n        const response = await getCaseStatistics();\n        if (response.data && response.data.code === 200) {\n          statistics.value = response.data.data || {\n            totalCases: 0,\n            criminalCases: 0,\n            civilCases: 0,\n            administrativeCases: 0,\n            investigatingCases: 0,\n            inTrialCases: 0,\n            closedCases: 0\n          };\n        } else {\n          console.error('加载案件统计失败:', response.data ? response.data.msg : '未知错误');\n        }\n      } catch (error) {\n        console.error('加载案件统计失败:', error);\n      } finally {\n        statisticsLoading.value = false;\n      }\n    };\n\n    // 搜索案件\n    const searchCasesData = async () => {\n      console.log('开始执行searchCasesData方法');\n      loading.value = true;\n      try {\n        // 构建搜索参数\n        const params = {\n          ...searchForm\n        };\n\n        // 确保使用当前的 pageSize 值，并且是数字类型\n        params.size = Number(pageSize.value);\n        params.page = Number(params.page);\n\n        // 设置默认排序\n        params.sortField = 'createdAt';\n        params.sortOrder = 'desc';\n        delete params.sortBy;\n\n        // 调试：检查参数是否正确\n        console.log('searchForm:', searchForm);\n        console.log('params:', params);\n        console.log('准备发送搜索请求...');\n\n        // 确保所有参数都是正确的类型\n        Object.keys(params).forEach(key => {\n          // 如果是空字符串且不是必需参数，则删除该参数\n          if (params[key] === '' && key !== 'q') {\n            delete params[key];\n          }\n        });\n        console.log('准备发送API请求，优化后的参数:', params);\n\n        // 使用axios发送请求\n        console.log('调用searchCasesApi前');\n        const response = await searchCasesApi(params);\n        console.log('调用searchCasesApi后');\n        console.log('API响应:', response);\n        console.log('处理API响应数据:', response);\n        if (response.data) {\n          console.log('响应数据:', response.data);\n          if (response.data.code === 200) {\n            const result = response.data.data;\n            console.log('结果数据:', result);\n            console.log('更新cases.value前，当前值:', cases.value);\n\n            // 直接更新数据，不使用setTimeout\n            cases.value = result.records || [];\n            console.log('更新cases.value后，新值:', cases.value);\n\n            // 确保totalItems正确设置为案件数量\n            totalItems.value = result.total !== undefined ? result.total : cases.value.length;\n            totalPages.value = result.pages || 0;\n            currentPage.value = result.current || 1;\n\n            // 更新key，强制刷新组件\n            caseListKey.value += 1;\n            console.log('更新caseListKey:', caseListKey.value);\n          } else {\n            console.error('搜索案件失败:', response.data.msg || '未知错误');\n          }\n        } else {\n          console.error('搜索案件失败: 响应数据为空');\n        }\n      } catch (error) {\n        console.error('搜索案件失败:', error);\n      } finally {\n        loading.value = false;\n        console.log('searchCasesData方法执行完成');\n      }\n    };\n\n    // 搜索案件（用于搜索按钮点击事件）\n    const handleSearch = formData => {\n      console.log('CaseManagement收到搜索事件，接收到的数据:', formData);\n      console.log('搜索事件处理开始');\n      // 将CaseSearch组件传来的keyword字段映射到searchForm的q字段\n      if (formData) {\n        // 检查formData是否包含keyword属性\n        console.log('formData包含keyword属性:', Object.prototype.hasOwnProperty.call(formData, 'keyword'));\n        console.log('formData.keyword值:', formData.keyword);\n\n        // 更新搜索表单的值\n        searchForm.q = formData.keyword || '';\n        searchForm.caseType = formData.caseType || '';\n        searchForm.status = formData.status || '';\n        searchForm.startDateFrom = formData.startDateFrom || '';\n        searchForm.startDateTo = formData.startDateTo || '';\n        searchForm.createdAtFrom = formData.createdAtFrom || '';\n        searchForm.createdAtTo = formData.createdAtTo || '';\n\n        // 确保日期格式正确\n        if (searchForm.startDateFrom && !(searchForm.startDateFrom instanceof Date) && searchForm.startDateFrom.trim() !== '') {\n          try {\n            searchForm.startDateFrom = searchForm.startDateFrom.split('T')[0]; // 只保留日期部分\n          } catch (e) {\n            console.error('日期格式转换错误:', e);\n          }\n        }\n        if (searchForm.startDateTo && !(searchForm.startDateTo instanceof Date) && searchForm.startDateTo.trim() !== '') {\n          try {\n            searchForm.startDateTo = searchForm.startDateTo.split('T')[0]; // 只保留日期部分\n          } catch (e) {\n            console.error('日期格式转换错误:', e);\n          }\n        }\n        if (searchForm.createdAtFrom && !(searchForm.createdAtFrom instanceof Date) && searchForm.createdAtFrom.trim() !== '') {\n          try {\n            searchForm.createdAtFrom = searchForm.createdAtFrom.split('T')[0]; // 只保留日期部分\n          } catch (e) {\n            console.error('日期格式转换错误:', e);\n          }\n        }\n        if (searchForm.createdAtTo && !(searchForm.createdAtTo instanceof Date) && searchForm.createdAtTo.trim() !== '') {\n          try {\n            searchForm.createdAtTo = searchForm.createdAtTo.split('T')[0]; // 只保留日期部分\n          } catch (e) {\n            console.error('日期格式转换错误:', e);\n          }\n        }\n      }\n      console.log('处理后的searchForm:', {\n        ...searchForm\n      });\n      searchForm.page = 1; // 重置到第一页\n      console.log('准备调用searchCasesData');\n\n      // 直接调用searchCasesData，不使用setTimeout\n      // 更新key，强制刷新组件\n      caseListKey.value += 1;\n      console.log('更新caseListKey:', caseListKey.value);\n      searchCasesData();\n      console.log('searchCasesData调用完成');\n    };\n\n    // 重置搜索条件\n    const resetSearch = () => {\n      console.log('重置搜索条件');\n      // 清空搜索条件\n      searchForm.q = '';\n      searchForm.caseType = '';\n      searchForm.status = '';\n      searchForm.startDateFrom = '';\n      searchForm.startDateTo = '';\n      searchForm.createdAtFrom = '';\n      searchForm.createdAtTo = '';\n      searchForm.page = 1; // 重置到第一页\n\n      console.log('重置后的searchForm:', {\n        ...searchForm\n      });\n      console.log('准备调用searchCasesData');\n\n      // 直接调用searchCasesData，不使用setTimeout\n      // 更新key，强制刷新组件\n      caseListKey.value += 1;\n      console.log('更新caseListKey:', caseListKey.value);\n      searchCasesData();\n      console.log('searchCasesData调用完成');\n    };\n\n    // 切换高级搜索\n    const toggleAdvancedSearch = value => {\n      // 如果传入了值，使用传入的值；否则切换当前值\n      showAdvancedSearch.value = value !== undefined ? value : !showAdvancedSearch.value;\n    };\n\n    // 切换页码\n    const changePage = page => {\n      console.log('切换页码:', page);\n      searchForm.page = page;\n\n      // 直接调用searchCasesData，不使用setTimeout\n      // 更新key，强制刷新组件\n      caseListKey.value += 1;\n      console.log('更新caseListKey:', caseListKey.value);\n      searchCasesData();\n      console.log('searchCasesData调用完成');\n    };\n\n    // 切换每页显示数量\n    const changePageSize = size => {\n      console.log('切换每页显示数量:', size);\n      pageSize.value = size;\n      searchForm.page = 1; // 重置到第一页\n\n      // 直接调用searchCasesData，不使用setTimeout\n      // 更新key，强制刷新组件\n      caseListKey.value += 1;\n      console.log('更新caseListKey:', caseListKey.value);\n      searchCasesData();\n      console.log('searchCasesData调用完成');\n    };\n\n    // 显示添加案件模态框\n    const showAddCaseModal = () => {\n      if (addCaseModalRef.value) {\n        addCaseModalRef.value.showModal();\n      }\n    };\n\n    // 显示编辑案件模态框\n    const showEditCaseModal = caseItem => {\n      if (editCaseModalRef.value) {\n        editCaseModalRef.value.showModal(caseItem);\n      }\n    };\n\n    // 确认删除案件\n    const confirmDeleteCase = caseItem => {\n      if (deleteCaseModalRef.value) {\n        deleteCaseModalRef.value.showModal(caseItem);\n      }\n    };\n\n    // 查看案件详情\n    const viewCaseDetail = caseId => {\n      if (caseDetailModalRef.value) {\n        caseDetailModalRef.value.showModal(caseId);\n      }\n    };\n\n    // 提交添加案件\n    const submitAddCase = async caseData => {\n      try {\n        const response = await addCase(caseData);\n        if (response.data && response.data.code === 200) {\n          console.log('添加案件成功');\n          // 使用setTimeout确保在下一个事件循环中执行\n          setTimeout(() => {\n            // 更新key，强制刷新组件\n            caseListKey.value += 1;\n            console.log('更新caseListKey:', caseListKey.value);\n            // 重新加载数据\n            searchCasesData();\n            loadStatistics();\n            console.log('searchCasesData和loadStatistics调用完成');\n          }, 0);\n        } else {\n          console.error('添加案件失败:', response.data.msg || '未知错误');\n        }\n      } catch (error) {\n        console.error('添加案件失败:', error);\n      }\n    };\n\n    // 提交编辑案件\n    const submitEditCase = async caseData => {\n      try {\n        const response = await updateCase(caseData);\n        if (response.data && response.data.code === 200) {\n          console.log('编辑案件成功');\n          // 使用setTimeout确保在下一个事件循环中执行\n          setTimeout(() => {\n            // 更新key，强制刷新组件\n            caseListKey.value += 1;\n            console.log('更新caseListKey:', caseListKey.value);\n            // 重新加载数据\n            searchCasesData();\n            loadStatistics();\n            console.log('searchCasesData和loadStatistics调用完成');\n          }, 0);\n        } else {\n          console.error('编辑案件失败:', response.data.msg || '未知错误');\n        }\n      } catch (error) {\n        console.error('编辑案件失败:', error);\n      }\n    };\n\n    // 删除案件\n    const deleteCase = async caseId => {\n      try {\n        const response = await deleteCaseApi(caseId);\n        if (response.data && response.data.code === 200) {\n          console.log('删除案件成功');\n          // 使用setTimeout确保在下一个事件循环中执行\n          setTimeout(() => {\n            // 更新key，强制刷新组件\n            caseListKey.value += 1;\n            console.log('更新caseListKey:', caseListKey.value);\n            // 重新加载数据\n            searchCasesData();\n            loadStatistics();\n            console.log('searchCasesData和loadStatistics调用完成');\n          }, 0);\n        } else {\n          console.error('删除案件失败:', response.data.msg || '未知错误');\n        }\n      } catch (error) {\n        console.error('删除案件失败:', error);\n      }\n    };\n\n    // 组件挂载时初始化数据\n    onMounted(() => {\n      console.log('CaseManagement组件挂载');\n      // 初始化搜索表单\n      searchForm.page = 1;\n      searchForm.size = pageSize.value;\n      console.log('初始化searchForm:', {\n        ...searchForm\n      });\n      console.log('准备调用searchCasesData和loadStatistics');\n\n      // 直接调用，不使用setTimeout\n      // 更新key，强制刷新组件\n      caseListKey.value += 1;\n      console.log('更新caseListKey:', caseListKey.value);\n      // 加载案件数据\n      searchCasesData();\n      // 加载统计数据\n      loadStatistics();\n      console.log('searchCasesData和loadStatistics调用完成');\n    });\n\n    // 监听页码变化，重新加载数据\n    watch(currentPage, newPage => {\n      console.log('监听到currentPage变化:', newPage);\n      if (searchForm.page !== newPage) {\n        searchForm.page = newPage;\n\n        // 直接调用searchCasesData，不使用setTimeout\n        // 更新key，强制刷新组件\n        caseListKey.value += 1;\n        console.log('更新caseListKey:', caseListKey.value);\n        searchCasesData();\n        console.log('searchCasesData调用完成');\n      }\n    });\n\n    // 手动刷新案件列表\n    const refreshCaseList = () => {\n      console.log('手动刷新案件列表');\n      // 更新key，强制刷新组件\n      caseListKey.value += 1;\n      console.log('更新caseListKey:', caseListKey.value);\n      // 重新加载数据\n      searchCasesData();\n    };\n\n    // 返回组件需要的数据和方法\n    return {\n      // 状态\n      loading,\n      statisticsLoading,\n      showAdvancedSearch,\n      cases,\n      caseListKey,\n      statistics,\n      // 分页\n      currentPage,\n      totalPages,\n      totalItems,\n      pageSize,\n      // 表单\n      searchForm,\n      // 模态框引用\n      addCaseModalRef,\n      editCaseModalRef,\n      deleteCaseModalRef,\n      caseDetailModalRef,\n      // 方法\n      refreshCaseList,\n      toggleAdvancedSearch,\n      searchCases: handleSearch,\n      resetSearch,\n      changePage,\n      changePageSize,\n      showAddCaseModal,\n      showEditCaseModal,\n      submitAddCase,\n      submitEditCase,\n      confirmDeleteCase,\n      deleteCase,\n      viewCaseDetail\n    };\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","watch","searchCases","searchCasesApi","addCase","updateCase","deleteCase","deleteCaseApi","getCaseStatistics","CaseStatistics","CaseSearch","CaseList","Pagination","AddCaseModal","EditCaseModal","DeleteCaseModal","CaseDetailModal","name","components","setup","loading","statisticsLoading","showAdvancedSearch","cases","caseListKey","statistics","totalCases","criminalCases","civilCases","administrativeCases","investigatingCases","inTrialCases","closedCases","currentPage","pageSize","totalItems","totalPages","searchForm","q","caseType","status","startDateFrom","startDateTo","createdAtFrom","createdAtTo","sortBy","page","size","value","addCaseModalRef","editCaseModalRef","deleteCaseModalRef","caseDetailModalRef","loadStatistics","response","data","code","console","error","msg","searchCasesData","log","params","Number","sortField","sortOrder","Object","keys","forEach","key","result","records","total","undefined","length","pages","current","handleSearch","formData","prototype","hasOwnProperty","call","keyword","Date","trim","split","e","resetSearch","toggleAdvancedSearch","changePage","changePageSize","showAddCaseModal","showModal","showEditCaseModal","caseItem","confirmDeleteCase","viewCaseDetail","caseId","submitAddCase","caseData","setTimeout","submitEditCase","newPage","refreshCaseList"],"sources":["/Users/sunziang/IdeaProjects/backend_bilu/bilu_backend2/src/components/case/CaseManagement.vue"],"sourcesContent":["<template>\n  <div class=\"container-fluid mt-4\">\n    <!-- 页面标题区域 -->\n    <div class=\"row mb-4\">\n      <div class=\"col-12\">\n        <div class=\"d-flex justify-content-between align-items-center\">\n          <div>\n            <h2 class=\"display-6 fw-bold text-primary mb-0\">\n              <i class=\"bi bi-folder2-open me-2\"></i>案件管理\n            </h2>\n            <p class=\"text-muted mb-0\">查看和管理所有案件信息</p>\n          </div>\n          <div class=\"btn-group\">\n            <button class=\"btn btn-outline-primary\" @click=\"toggleAdvancedSearch\">\n              <i class=\"bi bi-funnel me-2\"></i>高级搜索\n            </button>\n            <button class=\"btn btn-outline-secondary\" @click=\"refreshCaseList\" title=\"刷新案件列表\">\n              <i class=\"bi bi-arrow-clockwise me-2\"></i>刷新\n            </button>\n            <button class=\"btn btn-success\" @click=\"showAddCaseModal\">\n              <i class=\"bi bi-plus-circle me-2\"></i>新增案件\n            </button>\n          </div>\n        </div>\n      </div>\n    </div>\n    \n    <!-- 案件统计卡片 -->\n    <case-statistics :loading=\"statisticsLoading\" :statistics=\"statistics\" />\n\n    <!-- 搜索区域 -->\n    <case-search \n      :search-form=\"searchForm\" \n      :show-advanced-search=\"showAdvancedSearch\"\n      @toggle-advanced=\"toggleAdvancedSearch\"\n      @search=\"handleSearch\"\n      @reset=\"resetSearch\"\n    />\n\n    <!-- 案件列表 -->\n    <case-list \n      :cases=\"cases\" \n      :loading=\"loading\"\n      :key=\"caseListKey\"\n      @view-detail=\"viewCaseDetail\"\n      @add=\"showAddCaseModal\"\n      @edit=\"showEditCaseModal\"\n      @delete=\"confirmDeleteCase\"\n    />\n    \n    <!-- 分页控件 -->\n    <pagination \n      :current-page=\"currentPage\" \n      :total-pages=\"totalPages\" \n      :total-items=\"totalItems\" \n      :page-size=\"pageSize\"\n      @page-change=\"changePage\"\n      @size-change=\"changePageSize\"\n    />\n    \n    <!-- 模态框组件 -->\n    <add-case-modal ref=\"addCaseModalRef\" @submit=\"submitAddCase\" />\n    <edit-case-modal ref=\"editCaseModalRef\" @submit=\"submitEditCase\" />\n    <delete-case-modal ref=\"deleteCaseModalRef\" @confirm=\"deleteCase\" />\n    <case-detail-modal ref=\"caseDetailModalRef\" @edit=\"showEditCaseModal\" />\n  </div>\n</template>\n\n<script>\nimport { ref, reactive, onMounted, watch } from 'vue'\nimport { searchCases as searchCasesApi, addCase, updateCase, deleteCase as deleteCaseApi, getCaseStatistics } from '@/api/case'\n\n// 导入组件\nimport CaseStatistics from '@/components/case/CaseStatistics.vue'\nimport CaseSearch from '@/components/case/CaseSearch.vue'\nimport CaseList from '@/components/case/CaseList.vue'\nimport Pagination from '@/components/case/Pagination.vue'\nimport AddCaseModal from '@/components/case/modals/AddCaseModal.vue'\nimport EditCaseModal from '@/components/case/modals/EditCaseModal.vue'\nimport DeleteCaseModal from '@/components/case/modals/DeleteCaseModal.vue'\nimport CaseDetailModal from '@/components/case/modals/CaseDetailModal.vue'\n\nexport default {\n  name: 'CaseManagement',\n  components: {\n    CaseStatistics,\n    CaseSearch,\n    CaseList,\n    Pagination,\n    AddCaseModal,\n    EditCaseModal,\n    DeleteCaseModal,\n    CaseDetailModal\n  },\n  setup() {\n    // 状态变量\n    const loading = ref(false)\n    const statisticsLoading = ref(false)\n    const showAdvancedSearch = ref(false)\n    const cases = ref([])\n    const caseListKey = ref(0) // 用于强制刷新CaseList组件\n    const statistics = ref({\n      totalCases: 0,\n      criminalCases: 0,\n      civilCases: 0,\n      administrativeCases: 0,\n      investigatingCases: 0,\n      inTrialCases: 0,\n      closedCases: 0\n    })\n    \n    // 分页相关\n    const currentPage = ref(1)\n    const pageSize = ref(10)\n    const totalItems = ref(0)\n    const totalPages = ref(0)\n    \n    // 搜索表单\n    const searchForm = reactive({\n      q: '',\n      caseType: '',\n      status: '',\n      startDateFrom: '',\n      startDateTo: '',\n      createdAtFrom: '',\n      createdAtTo: '',\n      sortBy: 'createdAt_desc',\n      page: 1,\n      size: pageSize.value\n    })\n    \n    // 模态框引用\n    const addCaseModalRef = ref(null)\n    const editCaseModalRef = ref(null)\n    const deleteCaseModalRef = ref(null)\n    const caseDetailModalRef = ref(null)\n    \n    // 加载案件列表\n    // const loadCases = async () => {\n    //   loading.value = true\n    //   try {\n    //     const response = await getCaseList()\n    //     if (response.data && response.data.code === 200) {\n    //       cases.value = response.data.data || []\n    //     } else {\n    //       console.error('加载案件列表失败:', response.data ? response.data.msg : '未知错误')\n    //     }\n    //   } catch (error) {\n    //     console.error('加载案件列表失败:', error)\n    //   } finally {\n    //     loading.value = false\n    //   }\n    // }\n    \n    // 加载案件统计数据\n    const loadStatistics = async () => {\n      statisticsLoading.value = true\n      try {\n        const response = await getCaseStatistics()\n        if (response.data && response.data.code === 200) {\n          statistics.value = response.data.data || {\n            totalCases: 0,\n            criminalCases: 0,\n            civilCases: 0,\n            administrativeCases: 0,\n            investigatingCases: 0,\n            inTrialCases: 0,\n            closedCases: 0\n          }\n        } else {\n          console.error('加载案件统计失败:', response.data ? response.data.msg : '未知错误')\n        }\n      } catch (error) {\n        console.error('加载案件统计失败:', error)\n      } finally {\n        statisticsLoading.value = false\n      }\n    }\n    \n    // 搜索案件\n    const searchCasesData = async () => {\n      console.log('开始执行searchCasesData方法')\n      loading.value = true\n      try {\n        // 构建搜索参数\n        const params = { ...searchForm }\n        \n        // 确保使用当前的 pageSize 值，并且是数字类型\n        params.size = Number(pageSize.value)\n        params.page = Number(params.page)\n        \n        // 设置默认排序\n        params.sortField = 'createdAt'\n        params.sortOrder = 'desc'\n        delete params.sortBy\n        \n        // 调试：检查参数是否正确\n        console.log('searchForm:', searchForm)\n        console.log('params:', params)\n        console.log('准备发送搜索请求...')\n        \n        // 确保所有参数都是正确的类型\n        Object.keys(params).forEach(key => {\n          // 如果是空字符串且不是必需参数，则删除该参数\n          if (params[key] === '' && key !== 'q') {\n            delete params[key]\n          }\n        })\n        \n        console.log('准备发送API请求，优化后的参数:', params)\n        \n        // 使用axios发送请求\n        console.log('调用searchCasesApi前')\n        const response = await searchCasesApi(params)\n        console.log('调用searchCasesApi后')\n        console.log('API响应:', response)\n        \n        console.log('处理API响应数据:', response)\n        if (response.data) {\n          console.log('响应数据:', response.data)\n          if (response.data.code === 200) {\n            const result = response.data.data\n            console.log('结果数据:', result)\n            console.log('更新cases.value前，当前值:', cases.value)\n            \n            // 直接更新数据，不使用setTimeout\n            cases.value = result.records || []\n            console.log('更新cases.value后，新值:', cases.value)\n            \n            // 确保totalItems正确设置为案件数量\n            totalItems.value = result.total !== undefined ? result.total : cases.value.length\n            totalPages.value = result.pages || 0\n            currentPage.value = result.current || 1\n            \n            // 更新key，强制刷新组件\n            caseListKey.value += 1\n            console.log('更新caseListKey:', caseListKey.value)\n          } else {\n            console.error('搜索案件失败:', response.data.msg || '未知错误')\n          }\n        } else {\n          console.error('搜索案件失败: 响应数据为空')\n        }\n      } catch (error) {\n        console.error('搜索案件失败:', error)\n      } finally {\n        loading.value = false\n        console.log('searchCasesData方法执行完成')\n      }\n    }\n    \n    // 搜索案件（用于搜索按钮点击事件）\n    const handleSearch = (formData) => {\n      console.log('CaseManagement收到搜索事件，接收到的数据:', formData)\n      console.log('搜索事件处理开始')\n      // 将CaseSearch组件传来的keyword字段映射到searchForm的q字段\n      if (formData) {\n        // 检查formData是否包含keyword属性\n        console.log('formData包含keyword属性:', Object.prototype.hasOwnProperty.call(formData, 'keyword'))\n        console.log('formData.keyword值:', formData.keyword)\n        \n        // 更新搜索表单的值\n        searchForm.q = formData.keyword || ''\n        searchForm.caseType = formData.caseType || ''\n        searchForm.status = formData.status || ''\n        searchForm.startDateFrom = formData.startDateFrom || ''\n        searchForm.startDateTo = formData.startDateTo || ''\n        searchForm.createdAtFrom = formData.createdAtFrom || ''\n        searchForm.createdAtTo = formData.createdAtTo || ''\n        \n        // 确保日期格式正确\n        if (searchForm.startDateFrom && !(searchForm.startDateFrom instanceof Date) && searchForm.startDateFrom.trim() !== '') {\n          try {\n            searchForm.startDateFrom = searchForm.startDateFrom.split('T')[0] // 只保留日期部分\n          } catch (e) {\n            console.error('日期格式转换错误:', e)\n          }\n        }\n        \n        if (searchForm.startDateTo && !(searchForm.startDateTo instanceof Date) && searchForm.startDateTo.trim() !== '') {\n          try {\n            searchForm.startDateTo = searchForm.startDateTo.split('T')[0] // 只保留日期部分\n          } catch (e) {\n            console.error('日期格式转换错误:', e)\n          }\n        }\n        \n        if (searchForm.createdAtFrom && !(searchForm.createdAtFrom instanceof Date) && searchForm.createdAtFrom.trim() !== '') {\n          try {\n            searchForm.createdAtFrom = searchForm.createdAtFrom.split('T')[0] // 只保留日期部分\n          } catch (e) {\n            console.error('日期格式转换错误:', e)\n          }\n        }\n        \n        if (searchForm.createdAtTo && !(searchForm.createdAtTo instanceof Date) && searchForm.createdAtTo.trim() !== '') {\n          try {\n            searchForm.createdAtTo = searchForm.createdAtTo.split('T')[0] // 只保留日期部分\n          } catch (e) {\n            console.error('日期格式转换错误:', e)\n          }\n        }\n      }\n      console.log('处理后的searchForm:', { ...searchForm })\n      searchForm.page = 1 // 重置到第一页\n      console.log('准备调用searchCasesData')\n      \n      // 直接调用searchCasesData，不使用setTimeout\n      // 更新key，强制刷新组件\n      caseListKey.value += 1\n      console.log('更新caseListKey:', caseListKey.value)\n      searchCasesData()\n      console.log('searchCasesData调用完成')\n    }\n    \n    // 重置搜索条件\n    const resetSearch = () => {\n      console.log('重置搜索条件')\n      // 清空搜索条件\n      searchForm.q = ''\n      searchForm.caseType = ''\n      searchForm.status = ''\n      searchForm.startDateFrom = ''\n      searchForm.startDateTo = ''\n      searchForm.createdAtFrom = ''\n      searchForm.createdAtTo = ''\n      searchForm.page = 1 // 重置到第一页\n      \n      console.log('重置后的searchForm:', { ...searchForm })\n      console.log('准备调用searchCasesData')\n      \n      // 直接调用searchCasesData，不使用setTimeout\n      // 更新key，强制刷新组件\n      caseListKey.value += 1\n      console.log('更新caseListKey:', caseListKey.value)\n      searchCasesData()\n      console.log('searchCasesData调用完成')\n    }\n    \n    // 切换高级搜索\n    const toggleAdvancedSearch = (value) => {\n      // 如果传入了值，使用传入的值；否则切换当前值\n      showAdvancedSearch.value = value !== undefined ? value : !showAdvancedSearch.value\n    }\n    \n    // 切换页码\n    const changePage = (page) => {\n      console.log('切换页码:', page)\n      searchForm.page = page\n      \n      // 直接调用searchCasesData，不使用setTimeout\n      // 更新key，强制刷新组件\n      caseListKey.value += 1\n      console.log('更新caseListKey:', caseListKey.value)\n      searchCasesData()\n      console.log('searchCasesData调用完成')\n    }\n    \n    // 切换每页显示数量\n    const changePageSize = (size) => {\n      console.log('切换每页显示数量:', size)\n      pageSize.value = size\n      searchForm.page = 1 // 重置到第一页\n      \n      // 直接调用searchCasesData，不使用setTimeout\n      // 更新key，强制刷新组件\n      caseListKey.value += 1\n      console.log('更新caseListKey:', caseListKey.value)\n      searchCasesData()\n      console.log('searchCasesData调用完成')\n    }\n    \n    // 显示添加案件模态框\n    const showAddCaseModal = () => {\n      if (addCaseModalRef.value) {\n        addCaseModalRef.value.showModal()\n      }\n    }\n    \n    // 显示编辑案件模态框\n    const showEditCaseModal = (caseItem) => {\n      if (editCaseModalRef.value) {\n        editCaseModalRef.value.showModal(caseItem)\n      }\n    }\n    \n    // 确认删除案件\n    const confirmDeleteCase = (caseItem) => {\n      if (deleteCaseModalRef.value) {\n        deleteCaseModalRef.value.showModal(caseItem)\n      }\n    }\n    \n    // 查看案件详情\n    const viewCaseDetail = (caseId) => {\n      if (caseDetailModalRef.value) {\n        caseDetailModalRef.value.showModal(caseId)\n      }\n    }\n    \n    // 提交添加案件\n    const submitAddCase = async (caseData) => {\n      try {\n        const response = await addCase(caseData)\n        if (response.data && response.data.code === 200) {\n          console.log('添加案件成功')\n          // 使用setTimeout确保在下一个事件循环中执行\n          setTimeout(() => {\n            // 更新key，强制刷新组件\n            caseListKey.value += 1\n            console.log('更新caseListKey:', caseListKey.value)\n            // 重新加载数据\n            searchCasesData()\n            loadStatistics()\n            console.log('searchCasesData和loadStatistics调用完成')\n          }, 0)\n        } else {\n          console.error('添加案件失败:', response.data.msg || '未知错误')\n        }\n      } catch (error) {\n        console.error('添加案件失败:', error)\n      }\n    }\n    \n    // 提交编辑案件\n    const submitEditCase = async (caseData) => {\n      try {\n        const response = await updateCase(caseData)\n        if (response.data && response.data.code === 200) {\n          console.log('编辑案件成功')\n          // 使用setTimeout确保在下一个事件循环中执行\n          setTimeout(() => {\n            // 更新key，强制刷新组件\n            caseListKey.value += 1\n            console.log('更新caseListKey:', caseListKey.value)\n            // 重新加载数据\n            searchCasesData()\n            loadStatistics()\n            console.log('searchCasesData和loadStatistics调用完成')\n          }, 0)\n        } else {\n          console.error('编辑案件失败:', response.data.msg || '未知错误')\n        }\n      } catch (error) {\n        console.error('编辑案件失败:', error)\n      }\n    }\n    \n    // 删除案件\n    const deleteCase = async (caseId) => {\n      try {\n        const response = await deleteCaseApi(caseId)\n        if (response.data && response.data.code === 200) {\n          console.log('删除案件成功')\n          // 使用setTimeout确保在下一个事件循环中执行\n          setTimeout(() => {\n            // 更新key，强制刷新组件\n            caseListKey.value += 1\n            console.log('更新caseListKey:', caseListKey.value)\n            // 重新加载数据\n            searchCasesData()\n            loadStatistics()\n            console.log('searchCasesData和loadStatistics调用完成')\n          }, 0)\n        } else {\n          console.error('删除案件失败:', response.data.msg || '未知错误')\n        }\n      } catch (error) {\n        console.error('删除案件失败:', error)\n      }\n    }\n    \n    // 组件挂载时初始化数据\n    onMounted(() => {\n      console.log('CaseManagement组件挂载')\n      // 初始化搜索表单\n      searchForm.page = 1\n      searchForm.size = pageSize.value\n      \n      console.log('初始化searchForm:', { ...searchForm })\n      console.log('准备调用searchCasesData和loadStatistics')\n      \n      // 直接调用，不使用setTimeout\n      // 更新key，强制刷新组件\n      caseListKey.value += 1\n      console.log('更新caseListKey:', caseListKey.value)\n      // 加载案件数据\n      searchCasesData()\n      // 加载统计数据\n      loadStatistics()\n      console.log('searchCasesData和loadStatistics调用完成')\n    })\n    \n    // 监听页码变化，重新加载数据\n    watch(currentPage, (newPage) => {\n      console.log('监听到currentPage变化:', newPage)\n      if (searchForm.page !== newPage) {\n        searchForm.page = newPage\n        \n        // 直接调用searchCasesData，不使用setTimeout\n        // 更新key，强制刷新组件\n        caseListKey.value += 1\n        console.log('更新caseListKey:', caseListKey.value)\n        searchCasesData()\n        console.log('searchCasesData调用完成')\n      }\n    })\n    \n    // 手动刷新案件列表\n    const refreshCaseList = () => {\n      console.log('手动刷新案件列表')\n      // 更新key，强制刷新组件\n      caseListKey.value += 1\n      console.log('更新caseListKey:', caseListKey.value)\n      // 重新加载数据\n      searchCasesData()\n    }\n    \n    // 返回组件需要的数据和方法\n    return {\n      // 状态\n      loading,\n      statisticsLoading,\n      showAdvancedSearch,\n      cases,\n      caseListKey,\n      statistics,\n      \n      // 分页\n      currentPage,\n      totalPages,\n      totalItems,\n      pageSize,\n      \n      // 表单\n      searchForm,\n      \n      // 模态框引用\n      addCaseModalRef,\n      editCaseModalRef,\n      deleteCaseModalRef,\n      caseDetailModalRef,\n      \n      // 方法\n      refreshCaseList,\n      toggleAdvancedSearch,\n      searchCases: handleSearch,\n      resetSearch,\n      changePage,\n      changePageSize,\n      showAddCaseModal,\n      showEditCaseModal,\n      submitAddCase,\n      submitEditCase,\n      confirmDeleteCase,\n      deleteCase,\n      viewCaseDetail\n    }\n  }\n}\n</script>\n\n<style scoped>\n.container-fluid {\n  max-width: 1600px;\n  margin: 0 auto;\n}\n\n.display-6 {\n  font-size: 2rem;\n}\n\n.btn-success {\n  background: linear-gradient(to right, #28a745, #20c997);\n  border: none;\n  box-shadow: 0 4px 10px rgba(40, 167, 69, 0.3);\n}\n\n.btn-success:hover {\n  background: linear-gradient(to right, #218838, #1e9e7f);\n  transform: translateY(-2px);\n  box-shadow: 0 6px 15px rgba(40, 167, 69, 0.4);\n}\n\n.btn-outline-primary {\n  color: #4a6cf7;\n  border-color: #4a6cf7;\n}\n\n.btn-outline-primary:hover {\n  background-color: rgba(74, 108, 247, 0.1);\n  color: #2651f0;\n  border-color: #2651f0;\n}\n</style>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}