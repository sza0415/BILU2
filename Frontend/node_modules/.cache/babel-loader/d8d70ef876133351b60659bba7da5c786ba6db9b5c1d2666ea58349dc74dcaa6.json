{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport router from '../router';\n\n// 创建axios实例\nconst axiosInstance = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? '/api' : 'http://localhost:8080/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\naxiosInstance.interceptors.request.use(config => {\n  // 从localStorage获取token\n  const userInfo = localStorage.getItem('userInfo');\n  if (userInfo) {\n    try {\n      const {\n        token\n      } = JSON.parse(userInfo);\n      if (token) {\n        // 设置请求头的Authorization字段\n        config.headers['Authorization'] = `Bearer ${token}`;\n      }\n    } catch (error) {\n      console.error('解析用户信息失败:', error);\n    }\n  }\n  return config;\n}, error => {\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\naxiosInstance.interceptors.response.use(response => {\n  return response;\n}, error => {\n  if (error.response) {\n    const {\n      status\n    } = error.response;\n\n    // 处理401未授权错误\n    if (status === 401) {\n      console.error('未授权，请重新登录');\n      // 清除本地存储的用户信息\n      localStorage.removeItem('userInfo');\n      // 跳转到登录页面\n      router.push('/login');\n    }\n\n    // 处理其他常见HTTP错误\n    if (status === 403) {\n      console.error('禁止访问');\n    } else if (status === 404) {\n      console.error('请求的资源不存在');\n    } else if (status === 500) {\n      console.error('服务器内部错误');\n    }\n  } else if (error.request) {\n    // 请求已发送但没有收到响应\n    console.error('网络错误，无法连接到服务器');\n  } else {\n    // 请求配置出错\n    console.error('请求配置错误:', error.message);\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","router","axiosInstance","create","baseURL","process","env","NODE_ENV","timeout","headers","interceptors","request","use","config","userInfo","localStorage","getItem","token","JSON","parse","error","console","Promise","reject","response","status","removeItem","push","message"],"sources":["/Users/sunziang/IdeaProjects/backend_bilu/bilu_backend2/src/utils/axios.js"],"sourcesContent":["import axios from 'axios'\nimport router from '../router'\n\n// 创建axios实例\nconst axiosInstance = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? '/api' : 'http://localhost:8080/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\n// 请求拦截器\naxiosInstance.interceptors.request.use(\n  config => {\n    // 从localStorage获取token\n    const userInfo = localStorage.getItem('userInfo')\n    if (userInfo) {\n      try {\n        const { token } = JSON.parse(userInfo)\n        if (token) {\n          // 设置请求头的Authorization字段\n          config.headers['Authorization'] = `Bearer ${token}`\n        }\n      } catch (error) {\n        console.error('解析用户信息失败:', error)\n      }\n    }\n    return config\n  },\n  error => {\n    console.error('请求错误:', error)\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\naxiosInstance.interceptors.response.use(\n  response => {\n    return response\n  },\n  error => {\n    if (error.response) {\n      const { status } = error.response\n      \n      // 处理401未授权错误\n      if (status === 401) {\n        console.error('未授权，请重新登录')\n        // 清除本地存储的用户信息\n        localStorage.removeItem('userInfo')\n        // 跳转到登录页面\n        router.push('/login')\n      }\n      \n      // 处理其他常见HTTP错误\n      if (status === 403) {\n        console.error('禁止访问')\n      } else if (status === 404) {\n        console.error('请求的资源不存在')\n      } else if (status === 500) {\n        console.error('服务器内部错误')\n      }\n    } else if (error.request) {\n      // 请求已发送但没有收到响应\n      console.error('网络错误，无法连接到服务器')\n    } else {\n      // 请求配置出错\n      console.error('请求配置错误:', error.message)\n    }\n    \n    return Promise.reject(error)\n  }\n)\n\nexport default axiosInstance"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,WAAW;;AAE9B;AACA,MAAMC,aAAa,GAAGF,KAAK,CAACG,MAAM,CAAC;EACjCC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,GAAG,MAAM,GAAG,2BAA2B;EACtFC,OAAO,EAAE,KAAK;EACdC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAP,aAAa,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CACpCC,MAAM,IAAI;EACR;EACA,MAAMC,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACjD,IAAIF,QAAQ,EAAE;IACZ,IAAI;MACF,MAAM;QAAEG;MAAM,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACL,QAAQ,CAAC;MACtC,IAAIG,KAAK,EAAE;QACT;QACAJ,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUQ,KAAK,EAAE;MACrD;IACF,CAAC,CAAC,OAAOG,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;IACnC;EACF;EACA,OAAOP,MAAM;AACf,CAAC,EACDO,KAAK,IAAI;EACPC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;EAC7B,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAlB,aAAa,CAACQ,YAAY,CAACc,QAAQ,CAACZ,GAAG,CACrCY,QAAQ,IAAI;EACV,OAAOA,QAAQ;AACjB,CAAC,EACDJ,KAAK,IAAI;EACP,IAAIA,KAAK,CAACI,QAAQ,EAAE;IAClB,MAAM;MAAEC;IAAO,CAAC,GAAGL,KAAK,CAACI,QAAQ;;IAEjC;IACA,IAAIC,MAAM,KAAK,GAAG,EAAE;MAClBJ,OAAO,CAACD,KAAK,CAAC,WAAW,CAAC;MAC1B;MACAL,YAAY,CAACW,UAAU,CAAC,UAAU,CAAC;MACnC;MACAzB,MAAM,CAAC0B,IAAI,CAAC,QAAQ,CAAC;IACvB;;IAEA;IACA,IAAIF,MAAM,KAAK,GAAG,EAAE;MAClBJ,OAAO,CAACD,KAAK,CAAC,MAAM,CAAC;IACvB,CAAC,MAAM,IAAIK,MAAM,KAAK,GAAG,EAAE;MACzBJ,OAAO,CAACD,KAAK,CAAC,UAAU,CAAC;IAC3B,CAAC,MAAM,IAAIK,MAAM,KAAK,GAAG,EAAE;MACzBJ,OAAO,CAACD,KAAK,CAAC,SAAS,CAAC;IAC1B;EACF,CAAC,MAAM,IAAIA,KAAK,CAACT,OAAO,EAAE;IACxB;IACAU,OAAO,CAACD,KAAK,CAAC,eAAe,CAAC;EAChC,CAAC,MAAM;IACL;IACAC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACQ,OAAO,CAAC;EACzC;EAEA,OAAON,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAelB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}