{"ast":null,"code":"import axios from 'axios';\n\n// 创建axios实例\nconst axiosInstance = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? '/api' : 'http://localhost:8080/api',\n  // 后端API基础URL\n  timeout: 10000,\n  // 请求超时时间\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器\naxiosInstance.interceptors.request.use(config => {\n  // 在发送请求之前做些什么\n  // 可以在这里添加token等认证信息\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  // 对请求错误做些什么\n  console.error('请求错误:', error);\n  return Promise.reject(error);\n});\n\n// 响应拦截器\naxiosInstance.interceptors.response.use(response => {\n  // 对响应数据做点什么\n  return response;\n}, error => {\n  // 对响应错误做点什么\n  console.error('响应错误:', error);\n\n  // 处理常见的HTTP错误\n  if (error.response) {\n    switch (error.response.status) {\n      case 401:\n        // 未授权，跳转到登录页\n        localStorage.removeItem('token');\n        window.location.href = '/login';\n        break;\n      case 403:\n        console.error('没有权限访问');\n        break;\n      case 404:\n        console.error('请求的资源不存在');\n        break;\n      case 500:\n        console.error('服务器内部错误');\n        break;\n      default:\n        console.error(`未处理的错误状态码: ${error.response.status}`);\n    }\n  } else if (error.request) {\n    // 请求已发出，但没有收到响应\n    console.error('网络错误，无法连接到服务器');\n  } else {\n    // 请求配置有误\n    console.error('请求配置错误:', error.message);\n  }\n  return Promise.reject(error);\n});\nexport default axiosInstance;","map":{"version":3,"names":["axios","axiosInstance","create","baseURL","process","env","NODE_ENV","timeout","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","console","Promise","reject","response","status","removeItem","window","location","href","message"],"sources":["/Users/sunziang/BILU2/Frontend/src/utils/axios.js"],"sourcesContent":["import axios from 'axios'\n\n// 创建axios实例\nconst axiosInstance = axios.create({\n  baseURL: process.env.NODE_ENV === 'development' ? '/api' : 'http://localhost:8080/api', // 后端API基础URL\n  timeout: 10000, // 请求超时时间\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\n// 请求拦截器\naxiosInstance.interceptors.request.use(\n  config => {\n    // 在发送请求之前做些什么\n    // 可以在这里添加token等认证信息\n    const token = localStorage.getItem('token')\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  error => {\n    // 对请求错误做些什么\n    console.error('请求错误:', error)\n    return Promise.reject(error)\n  }\n)\n\n// 响应拦截器\naxiosInstance.interceptors.response.use(\n  response => {\n    // 对响应数据做点什么\n    return response\n  },\n  error => {\n    // 对响应错误做点什么\n    console.error('响应错误:', error)\n    \n    // 处理常见的HTTP错误\n    if (error.response) {\n      switch (error.response.status) {\n        case 401:\n          // 未授权，跳转到登录页\n          localStorage.removeItem('token')\n          window.location.href = '/login'\n          break\n        case 403:\n          console.error('没有权限访问')\n          break\n        case 404:\n          console.error('请求的资源不存在')\n          break\n        case 500:\n          console.error('服务器内部错误')\n          break\n        default:\n          console.error(`未处理的错误状态码: ${error.response.status}`)\n      }\n    } else if (error.request) {\n      // 请求已发出，但没有收到响应\n      console.error('网络错误，无法连接到服务器')\n    } else {\n      // 请求配置有误\n      console.error('请求配置错误:', error.message)\n    }\n    \n    return Promise.reject(error)\n  }\n)\n\nexport default axiosInstance"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,aAAa,GAAGD,KAAK,CAACE,MAAM,CAAC;EACjCC,OAAO,EAAEC,OAAO,CAACC,GAAG,CAACC,QAAQ,KAAK,aAAa,GAAG,MAAM,GAAG,2BAA2B;EAAE;EACxFC,OAAO,EAAE,KAAK;EAAE;EAChBC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAP,aAAa,CAACQ,YAAY,CAACC,OAAO,CAACC,GAAG,CACpCC,MAAM,IAAI;EACR;EACA;EACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,EACDK,KAAK,IAAI;EACP;EACAC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;EAC7B,OAAOE,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACAhB,aAAa,CAACQ,YAAY,CAACY,QAAQ,CAACV,GAAG,CACrCU,QAAQ,IAAI;EACV;EACA,OAAOA,QAAQ;AACjB,CAAC,EACDJ,KAAK,IAAI;EACP;EACAC,OAAO,CAACD,KAAK,CAAC,OAAO,EAAEA,KAAK,CAAC;;EAE7B;EACA,IAAIA,KAAK,CAACI,QAAQ,EAAE;IAClB,QAAQJ,KAAK,CAACI,QAAQ,CAACC,MAAM;MAC3B,KAAK,GAAG;QACN;QACAR,YAAY,CAACS,UAAU,CAAC,OAAO,CAAC;QAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;QAC/B;MACF,KAAK,GAAG;QACNR,OAAO,CAACD,KAAK,CAAC,QAAQ,CAAC;QACvB;MACF,KAAK,GAAG;QACNC,OAAO,CAACD,KAAK,CAAC,UAAU,CAAC;QACzB;MACF,KAAK,GAAG;QACNC,OAAO,CAACD,KAAK,CAAC,SAAS,CAAC;QACxB;MACF;QACEC,OAAO,CAACD,KAAK,CAAC,cAAcA,KAAK,CAACI,QAAQ,CAACC,MAAM,EAAE,CAAC;IACxD;EACF,CAAC,MAAM,IAAIL,KAAK,CAACP,OAAO,EAAE;IACxB;IACAQ,OAAO,CAACD,KAAK,CAAC,eAAe,CAAC;EAChC,CAAC,MAAM;IACL;IACAC,OAAO,CAACD,KAAK,CAAC,SAAS,EAAEA,KAAK,CAACU,OAAO,CAAC;EACzC;EAEA,OAAOR,OAAO,CAACC,MAAM,CAACH,KAAK,CAAC;AAC9B,CACF,CAAC;AAED,eAAehB,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}